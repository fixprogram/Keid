// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  email           String   @unique
  passwordHash    String
  projectIds      String[]   
  name            String
  emailVerified    DateTime? @map("email_verified")
  followers       String[]
  following       String[]
  notifications    Notification[]
  reflections      Reflection[]
  image           String?

  @@map("users")
}
model Project {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String
  title           String
  style           String
  taskIds         String[]
  isStarred       Boolean
  isArchived      Boolean
  completed       Int
  metrics         Metric[]
}

type Metric {
  title           String
  goalValue       String?
  currentValue    String
  comments        Comment[]
}

model Task {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String    
  projectId      String    @db.ObjectId
  style          String
  deadline       DateTime?
  progress       Int
  completed      DateTime?
  parentId       String
  subtaskIds     String[]
  comments       Comment[]
  repeats        String // Repeats interval: "Once" | "Daily" | "Weekly" | "Custom"
  description    String
  points         Int        @default(0)
  metrics        String[]
}

model Habit {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String  
  userId         String
  style          String
  streak         Int
  comments       Comment[]
  repeats        Int       @default(28)
  isArchived     Boolean
  points         Int       @default(0)
}

type Comment {
  userId          String
  content         String
  time            String
  serviceContent  String?
  type            CommentType  @default(SERVICE)
}

enum CommentType {
  STARTED
  ARCHIVED
  PROGRESS_UPDATE
  COMPLETED
  SERVICE
  USER_COMMENT
}

model Challenge {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  title          String    
  style          String
  deadline       DateTime
  streak         Int
  completed      DateTime?
  failed         DateTime?
  comments       Comment[]
  repeats        Int        @default(28)
  description    String
  isPublic       Boolean
  isArchived     Boolean
  points         Int        @default(0)
  members        Member[]
}

type Notification {
  date           String
  userId         String
  type           NotificationType
  content        String
}

enum MoodType {
  HAPPY
  ANGRY
  SAD
  CALM
}

enum WorryingType {
  SLEEPINESS
  SADNESS
  ANXIETY
  STRESS
  LONELINESS
  INSOMNIA
  ANGER
  APATHY
  ENVY
}
type Reflection {
  date           String
  userId         String
  mood           MoodType?
  worryings      WorryingType[]
  summary        String
}

enum NotificationType {
  REPORT
  CHALLENGE
  OTHER
}

type Member {
  id             String
  streak         Int
  completed      DateTime?
  failed         DateTime?
  comments       Comment[]
}